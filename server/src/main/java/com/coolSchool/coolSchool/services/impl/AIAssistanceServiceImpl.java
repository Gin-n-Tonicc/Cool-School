package com.coolSchool.coolSchool.services.impl;

import com.coolSchool.coolSchool.exceptions.AI.ErrorProcessingAIResponseException;
import com.coolSchool.coolSchool.exceptions.AI.UnableToExtractContentFromAIResponseException;
import com.coolSchool.coolSchool.models.dto.common.CategoryDTO;
import com.coolSchool.coolSchool.services.AIAssistanceService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.MessageSource;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@Service
public class AIAssistanceServiceImpl implements AIAssistanceService {

    private final RestTemplate restTemplate;
    private final String openAIEndpoint = "https://api.openai.com/v1/chat/completions";
    private final String apiKey;
    private final MessageSource messageSource;
    private final ObjectMapper objectMapper;

    public AIAssistanceServiceImpl(RestTemplate restTemplate, @Value("${openai.api.key}") String apiKey, MessageSource messageSource, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.apiKey = apiKey;
        this.messageSource = messageSource;
        this.objectMapper = objectMapper;
    }

    /**
     * Generates text based on the input text using an AI model.
     *
     * @param inputText The input text to be processed by the AI model.
     * @return The generated text or an error message if processing fails.
     */
    @Override
    public String generateText(String inputText) {
        // Construct request body for generating text
        String requestBody = "{\"model\": \"gpt-3.5-turbo\", \"messages\": [{\"role\": \"user\", \"content\": \"" + inputText + "\"}]}";

        // Set headers and create request entity
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", "Bearer " + apiKey);
        HttpEntity<String> requestEntity = new HttpEntity<>(requestBody, headers);

        try {
            // Send POST request to OpenAI endpoint
            ResponseEntity<String> responseEntity = restTemplate.postForEntity(openAIEndpoint, requestEntity, String.class);

            // Process response and return generated text or error message
            if (responseEntity.getStatusCode() == HttpStatus.OK) {
                return responseEntity.getBody();
            } else {
                return "Error: " + responseEntity.getStatusCodeValue() + " - " + responseEntity.getBody();
            }
        } catch (Exception e) {
            return "Exception occurred: " + e.getMessage();
        }
    }

    /**
     * Extracts content from AI-generated content.
     *
     * @param aiGeneratedContent The content generated by the AI model.
     * @return The extracted content.
     * @throws UnableToExtractContentFromAIResponseException If content extraction fails.
     */
    @Override
    public String extractContent(String aiGeneratedContent) {
        try {
            // Parse JSON response to extract generated content
            JsonNode rootNode = objectMapper.readTree(aiGeneratedContent);
            JsonNode messageContent = rootNode.path("choices").get(0).path("message").path("content");
            if (!messageContent.isMissingNode()) {
                return messageContent.asText();
            } else {
                // Throw exception if content cannot be extracted
                throw new UnableToExtractContentFromAIResponseException(messageSource);
            }
        } catch (Exception e) {
            // Handle error while processing AI response
            throw new ErrorProcessingAIResponseException(messageSource);
        }
    }

    /**
     * Analyzes content provided as input.
     *
     * @param prompt The content to be analyzed.
     * @return The analyzed content.
     * @throws ErrorProcessingAIResponseException If content analysis fails.
     */
    @Override
    public String analyzeContent(String prompt) throws JsonProcessingException {
        // Create JSON request body for content analysis
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode messageNode = objectMapper.createObjectNode();
        messageNode.put("role", "user");
        messageNode.put("content", prompt);

        ObjectNode rootNode = objectMapper.createObjectNode();
        rootNode.put("model", "gpt-3.5-turbo");
        rootNode.set("messages", objectMapper.createArrayNode().add(messageNode));

        String requestBody = objectMapper.writeValueAsString(rootNode);

        // Set headers and create request entity
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", "Bearer " + apiKey);
        HttpEntity<String> requestEntity = new HttpEntity<>(requestBody, headers);

        try {
            // Send POST request to OpenAI endpoint for content analysis
            ResponseEntity<String> responseEntity = restTemplate.postForEntity(openAIEndpoint, requestEntity, String.class);
            String responseBody = responseEntity.getBody();

            // Extract content from AI response and return
            if (responseBody != null) {
                return extractContent(responseBody);
            } else {
                throw new UnableToExtractContentFromAIResponseException(messageSource);
            }
        } catch (Exception e) {
            // Handle error while processing AI response
            throw new ErrorProcessingAIResponseException(messageSource);
        }
    }

    /**
     * Builds a prompt message for categorizing blog content.
     *
     * @param blogContent The content of the blog.
     * @param categories  The list of categories to choose from.
     * @return The built prompt message.
     */
    @Override
    public String buildPrompt(String blogContent, List<CategoryDTO> categories) {
        // Build prompt message for categorizing blog content
        StringBuilder promptBuilder = new StringBuilder();
        promptBuilder.append("Given the blog content:\n\n");
        promptBuilder.append(blogContent);
        promptBuilder.append("\n\nWhich of the following categories is most appropriate? Please provide the category name.\n\n");
        for (CategoryDTO category : categories) {
            promptBuilder.append("- ").append(category.getName()).append("\n");
        }
        return promptBuilder.toString();
    }

    /**
     * Matches AI-generated response with a category.
     *
     * @param aiResponse The response generated by the AI model.
     * @param categories The list of categories to match against.
     * @return The matched category.
     * @throws ErrorProcessingAIResponseException If no matching category is found.
     */
    @Override
    public CategoryDTO matchCategory(String aiResponse, List<CategoryDTO> categories) {
        // Match AI-generated response with a category from the provided list
        for (CategoryDTO category : categories) {
            if (aiResponse.trim().equalsIgnoreCase(category.getName().trim())) {
                return category;
            }
        }
        // Throw exception if no matching category is found
        throw new ErrorProcessingAIResponseException(messageSource);
    }

    public List<String> translateBlog(String title, String summary, String content) {
        String context = "If the text is in English, translate it into Bulgarian. If the text is in Bulgarian, translate it into English ";
        String inputText = title + "\n" + summary + "\n" + content;

        try {
            // Construct JSON payload using Jackson
            ObjectMapper mapper = new ObjectMapper();
            ObjectNode requestNode = mapper.createObjectNode();
            requestNode.put("model", "gpt-4-0125-preview");

            ArrayNode messagesArray = mapper.createArrayNode();
            ObjectNode messageNode = mapper.createObjectNode();
            messageNode.put("role", "user");
            messageNode.put("content", context + inputText);
            messagesArray.add(messageNode);

            requestNode.set("messages", messagesArray);

            // Convert JSON payload to string
            String requestBody = mapper.writeValueAsString(requestNode);

            // Set up HTTP headers
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("Authorization", "Bearer " + apiKey);
            HttpEntity<String> requestEntity = new HttpEntity<>(requestBody, headers);

            // Make HTTP POST request
            ResponseEntity<String> responseEntity = restTemplate.postForEntity(openAIEndpoint, requestEntity, String.class);

            if (responseEntity.getStatusCode() == HttpStatus.OK) {
                return Arrays.asList(extractContent(responseEntity.getBody()).split("\n"));
            } else {
                return Collections.singletonList("Error: " + responseEntity.getStatusCodeValue() + " - " + responseEntity.getBody());
            }
        } catch (Exception e) {
            return Collections.singletonList("Exception occurred: " + e.getMessage());
        }
    }

    @Override
    public String identifyTheLanguage(String inputText) {
        String context = "Please in one word say in which language is this text: ";
        String requestBody = "{\"model\": \"gpt-3.5-turbo\", \"messages\": [{\"role\": \"user\", \"content\": \"" + context + inputText + "\"}]}";

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", "Bearer " + apiKey);
        HttpEntity<String> requestEntity = new HttpEntity<>(requestBody, headers);

        try {
            ResponseEntity<String> responseEntity = restTemplate.postForEntity(openAIEndpoint, requestEntity, String.class);

            if (responseEntity.getStatusCode() == HttpStatus.OK) {
                return extractContent(responseEntity.getBody());
            } else {
                return "Error: " + responseEntity.getStatusCodeValue() + " - " + responseEntity.getBody();
            }
        } catch (Exception e) {
            return "Exception occurred: " + e.getMessage();
        }
    }
}


